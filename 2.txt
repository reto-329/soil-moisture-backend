#include <WiFi.h>
#include <WebSocketsClient.h>
#include <LiquidCrystal_I2C.h>
#include <ArduinoJson.h> // Include ArduinoJson library for JSON handling

// Wi-Fi credentials
const char* ssid = "RetoðŸ˜Ž";       // Replace with your Wi-Fi SSID
const char* password = "12345678990"; // Replace with your Wi-Fi password

// WebSocket server details
const char* websocket_server = "agrosense-backend.onrender.com"; // Replace with your server domain
const int websocket_port = 443;                                  // Use 443 for WSS
const char* websocket_path = "/";                                // WebSocket path

// Initialize LCD (I2C address, columns, rows)
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Initialize WebSocket client
WebSocketsClient webSocket;

// Reconnection interval (in milliseconds)
const unsigned long RECONNECT_INTERVAL = 5000; // 5 seconds
unsigned long lastReconnectAttempt = 0;

void setup() {
  // Initialize Serial Monitor
  Serial.begin(115200);

  // Initialize LCD
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("WebSocket Status:");

  // Connect to Wi-Fi
  connectToWiFi();

  // Initialize WebSocket connection
  connectToWebSocket();
}

void loop() {
  // Handle WebSocket events
  webSocket.loop();

  // Check Wi-Fi connection status
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("Wi-Fi disconnected. Reconnecting...");
    connectToWiFi();
  }

  // Attempt WebSocket reconnection if disconnected
  if (!webSocket.isConnected() && millis() - lastReconnectAttempt > RECONNECT_INTERVAL) {
    Serial.println("WebSocket disconnected. Reconnecting...");
    connectToWebSocket();
    lastReconnectAttempt = millis();
  }
}

// Connect to Wi-Fi
void connectToWiFi() {
  Serial.println("Connecting to Wi-Fi...");
  lcd.setCursor(0, 1);
  lcd.print("Wi-Fi Connecting");

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }

  Serial.println("\nConnected to Wi-Fi");
  lcd.setCursor(0, 1);
  lcd.print("Wi-Fi Connected ");
}

// Connect to WebSocket server
void connectToWebSocket() {
  Serial.println("Connecting to WebSocket server...");
  lcd.setCursor(0, 1);
  lcd.print("WS Connecting  ");

  webSocket.beginSSL(websocket_server, websocket_port, websocket_path);
  webSocket.onEvent(webSocketEvent);
}

// WebSocket event handler
void webSocketEvent(WStype_t type, uint8_t* payload, size_t length) {
  switch (type) {
    case WStype_DISCONNECTED:
      Serial.println("WebSocket disconnected");
      lcd.setCursor(0, 1);
      lcd.print("WS Disconnected ");
      break;

    case WStype_CONNECTED:
      Serial.println("WebSocket connected");
      lcd.setCursor(0, 1);
      lcd.print("WS Connected    ");

      // Send a JSON message on connection
      sendJsonMessage();
      break;

    case WStype_TEXT:
      Serial.printf("Received: %s\n", payload);

      // Display received message on LCD
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Data Received:");
      lcd.setCursor(0, 1);
      lcd.print((char*)payload);
      break;

    case WStype_ERROR:
      Serial.println("WebSocket error");
      lcd.setCursor(0, 1);
      lcd.print("WS Error       ");
      break;

    case WStype_PING:
      Serial.println("WebSocket ping received");
      break;

    case WStype_PONG:
      Serial.println("WebSocket pong received");
      break;
  }
}

// Function to send a JSON message
void sendJsonMessage() {
  // Create a JSON object
  StaticJsonDocument<200> jsonDoc;
  jsonDoc["message"] = "Hello from ESP32!";
  jsonDoc["status"] = "connected";

  // Serialize JSON to a string
  String jsonString;
  serializeJson(jsonDoc, jsonString);

  // Send the JSON string
  webSocket.sendTXT(jsonString);
  Serial.println("Sent JSON: " + jsonString);
}